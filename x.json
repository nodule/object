{
  "name": "object",
  "description": "Object nodes for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/object.git"
  },
  "dependencies": {
    "chix-group": "^1.0.0",
    "dot-object": "0.x.x",
    "instance-of": "1.x.x",
    "underscore": "1.x.x"
  },
  "nodes": [
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Cloning object"
      },
      "description": "Create a shallow-copied clone of the object. Any nested objects or arrays will be copied by reference, not duplicated.",
      "async": true,
      "ns": "object",
      "name": "clone",
      "fn": "on.input.in = function() {\n  output({out: $.clone('in', underscore.clone($.in))});\n};\n\n"
    },
    {
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input Object",
            "type": "object",
            "async": true
          },
          "target": {
            "title": "Target Object",
            "type": "object",
            "default": {}
          },
          "from": {
            "title": "From",
            "type": "array"
          },
          "to": {
            "title": "To",
            "type": "array"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "Output",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Copying object properties"
      },
      "description": "Copy properties from one object to another object.",
      "async": true,
      "ns": "object",
      "name": "copy",
      "fn": "on.input.in = function() {\n  var doo;\n  var i;\n\n  // Receiving an array, check both are of the same length.\n  if($.from.length !== $.to.length) {\n    output({error: $.create(Error('from length does not match to length'))});\n  } else {\n    doo = dot_object();\n    var merge = true;\n    // should already be done, but to make sure.\n    // not sure if it's the case when $.target is set as context\n    $.target = JSON.parse(JSON.stringify($.target));\n    for(i = 0; i < $.from.length; i++) {\n      doo.copy($.from[i], $.to[i], $.in, $.target, merge);\n    }\n\n    output({out: $.write('in', $.target)});\n  }\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Creating object"
      },
      "description": "Create an object, if input is a direct object it just returns a copy of the object",
      "async": true,
      "ns": "object",
      "name": "create",
      "fn": "on.input.in = function() { output({out: $.clone('in', $.get('in'))}); };\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "defaults": {
            "title": "Defaults",
            "type": "object"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Applying defaults to object"
      },
      "description": "Fill in undefined properties in object with values from the defaults objects, and return the object. As soon as the property is filled, further defaults will have no effect.",
      "async": true,
      "ns": "object",
      "name": "defaults",
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.defaults($.in, $.defaults))});\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "source": {
            "title": "Source Objects",
            "type": "array",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Extending object"
      },
      "description": "Copy all of the properties in the source objects over to the destination object, and return the destination object. It's in-order, so the last source will override properties of the same name in previous arguments.",
      "async": true,
      "ns": "object",
      "name": "extend",
      "fn": "state.extend = underscore.extend.apply;\nstate.args = null;\nstate.source = null;\n\non.input.in = function() {\n  if(state.args) {\n     state.args.unshift($.in);\n     output({out: $.write('in', state.extend(null, state.args))});\n     state.args = null;\n  } else {\n    state.args = [$.in];\n  }\n};\n\non.input.source = function() {\n\n  if(state.args) {\n     state.args.push($.source);\n     output({out: $.write('in', state.extend(null, state.args))});\n     state.args = null;\n  } else {\n    state.args = [$.source];\n  }\n\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "Value(s)",
            "type": "array",
            "async": true
          },
          "keys": {
            "title": "Key(s)",
            "type": "array"
          },
          "object": {
            "title": "Object",
            "type": "object",
            "default": null
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Filling object"
      },
      "description": "Fills an object with key/value pairs. Both key and in are array ports. Key must be fed the key names, and in will contain the values.",
      "async": true,
      "ns": "object",
      "name": "fill",
      "fn": "on.input.in = function() {\n  var i;\n  var obj = $.object ? $.object : {};\n  if($.keys.length !== $.in.length) {\n    output({error: $.create(Error('Key length does not match value length'))});\n  } else {\n    for(i = 0; i < $.keys.length; i++) {\n     obj[$.keys[i]] = $.in[i];\n    }\n    output({out: $.write('in', obj)});\n  }\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "chix-group": "latest"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "any"
          },
          "xin": {
            "title": "In Group",
            "type": "any"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "group": "result",
            "type": "any"
          },
          "xout": {
            "title": "Xout",
            "type": "array"
          }
        }
      },
      "phrases": {
        "active": "Grouping object"
      },
      "description": "Groups input into an array",
      "async": true,
      "ns": "object",
      "name": "group",
      "fn": "on.start = function start() {\n  state.group = chix_group.create()\n  state.handler = function stateHandler() {\n    if (state.group.isComplete()) {\n      output({out: $.create(state.group.read())})\n    }\n  }\n}\n\n// should be able to continously receive groups.\non.input.in = function () {\n  state.group.add($.in)\n  state.handler()\n\n  /*\n  // x contains our keys\n  for (var gid in x) {\n    if(!state.hasOwnProperty(gid)) {\n      state[gid] = {\n        items: [],\n        total: null,\n        complete: false\n      };\n    }\n\n    state[gid].items.push($.get('in'));\n\n    if (state[gid].complete &&\n      state[gid].total === (state[gid].items.length)) {\n\n      var g = chi.group('xout', output);\n      output({\n        out: $.create(state[gid].items)\n      }, g.item());\n\n      g.done();\n\n      delete state[gid];\n\n    }\n  }\n  */\n};\n\non.input.xin = function () {\n  state.group.receive($.xin)\n  state.handler()\n  /*\n  if(!state.hasOwnProperty($.xin.gid)) {\n    state[$.xin.gid] = {\n      items: [],\n      total: null,\n      complete: false\n    };\n  }\n\n  if ($.xin.complete) {\n    state[$.xin.gid].total = $.xin.items.length;\n    state[$.xin.gid].complete = true;\n\n    if (state[$.xin.gid].complete &&\n      state[$.xin.gid].total === (state[$.xin.gid].items.length)) {\n\n      var g = chi.group('xout', output);\n      output({\n        out: $.create(state[$.xin.gid].items)\n      }, g.item());\n\n      g.done();\n\n      delete state[$.xin.gid];\n\n    }\n  }\n  */\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "any"
          },
          "xin": {
            "title": "In Group",
            "type": "any"
          },
          "by": {
            "title": "Group By",
            "type": "any"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "group": "result",
            "type": "boolean"
          },
          "by": {
            "title": "Group By",
            "group": "result",
            "type": "any"
          },
          "xout": {
            "title": "Xout",
            "type": "array"
          }
        }
      },
      "expose": [
        "chi"
      ],
      "phrases": {
        "active": "Grouping object"
      },
      "description": "Groups an object by it's differentiator",
      "async": true,
      "ns": "object",
      "name": "groupBy",
      "fn": "state = {\n  group: {},\n  total: 0\n};\n\n// If this even works, state is not cleared\n// properly or at lease during send out\n// the current groups can be removed.\n\n// really needs a main also.\n// main is called always then.\n// and check the existance of those keys\n// first just make the synchronous one\non.input.in = function () {\n  // x contains our keys\n  if (!x.hasOwnProperty(state.gid)) {\n    console.log(x)\n    throw Error('groupBy:in State gid not initialized yet', state.gid)\n  }\n  var id = x[state.gid];\n  if (!state[id]) {\n    state[id] = {};\n  }\n\n  state[id].in = $.get('in');\n\n  if (state[id].by) {\n    // we have a match.\n    if (!state.group[state[id].by]) {\n      state.group[state[id].by] = [];\n    }\n    state.group[state[id].by].push(state[id].in);\n  }\n\n  state.total++;\n\n  if (state.complete && state.length === (state.total / 2)) {\n    // send them out, might also create groups again.\n    for (var key in state.group) {\n      var g = chi.group('xout', output);\n\n      // like to introduce the grouped output, output like the below is grouped\n      // it's a bit like an array port, only difference the output goes to normal ports.\n      // I would like to add the convention, that if you send output this way.\n      // You must declare a group inside the json\n      //\n      // out: \"group\": \"result\"\n      // by:  \"group\": \"result\"\n      //\n      // in a ui this will look like:\n      // [o o] o o o\n      //\n      // Only two states:\n      //\n      //  [â€¢ â€¢] and [o o]\n      //\n      // Whereas the individual ports are not perse synchronous:\n      //\n      //  [o o] o â€¢ o\n      //\n      // Where the first is the grouped output, you are assured those ports\n      // are pairs of data comming out, belong to eachother.\n      output({\n        out:$.create(state.group[key]),\n        by: $.create(JSON.parse(key)) // same as $.by\n      }, g.item());\n      g.done();\n    }\n  }\n};\n\n// collect the keys.\non.input.by = function () {\n  if (!x.hasOwnProperty(state.gid)) {\n    console.log(x)\n    throw Error('groupBy:by State gid not initialized yet', state.gid)\n  }\n\n  var id = x[state.gid];\n  if (!state[id]) state[id] = {};\n\n  state[id].by = JSON.stringify($.by); // keyify\n\n  if (state[id].in) {\n    // we have a match.\n    if (!state.group[state[id].by]) state.group[state[id].by] = [];\n    state.group[state[id].by].push(state[id].in);\n  }\n\n  state.total++;\n\n  if (state.complete && state.length === (state.total / 2)) {\n    // send them out, might also create groups again.\n    for (var key in state.group) {\n      var g = chi.group('xout', output);\n      output({\n        out: state.group[key],\n        by: $.create(JSON.parse(key)) // same as $.by\n      }, g.item());\n      g.done();\n    }\n  }\n\n};\n\n// xin now kinda acts like a main.\n// more clear would probably be group begin and end methods.\n// it also makes it required to have this connected.\non.input.xin = function () {\n  // will always arrive first.\n  // probably this can all be done outside a component.\n  // the pair matching is something common.\n  if (!$.xin.complete) {\n    // register the groupId\n    // we rely on this being set first\n    state.gid = $.xin.gid;\n    state.complete = false;\n  } else {\n    // is finished\n    // send it out.\n    state.complete = true;\n    state.length = $.xin.items.length;\n  }\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "object"
          },
          "no": {
            "title": "No",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Determining whether the object has property {{input.path}}"
      },
      "description": "Does the object contain the given property? You can use dot notation to dig deeper into the object.",
      "async": true,
      "ns": "object",
      "name": "has",
      "fn": "on.input.in = function() {\n  if(dot_object().pick($.path, $.in)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n}\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          }
        }
      },
      "phrases": {
        "active": "Inverting object"
      },
      "description": "Retrieves a copy of the object where the keys have become the values and the values the keys. For this to work, all of your object's values should be unique and string serializable",
      "async": true,
      "ns": "object",
      "name": "invert",
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.invert($.in))});\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "instance-of": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "kind": {
            "title": "Type",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "any"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining whether object is a {{input.type}}"
      },
      "description": "Determines if object an object is of a certain type",
      "async": true,
      "ns": "object",
      "name": "is",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (instance_of(val, $.kind)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "type": "any"
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "object"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining Arguments Object"
      },
      "description": "Determines if object is an Arguments Object",
      "async": true,
      "ns": "object",
      "name": "isArguments",
      "fn": "on.input.in = function() {\n  if (underscore.isArguments($.in)) {\n    output({yes: $.get('in')});\n  } else {\n    output({no: $.get('in')});\n  }\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "array"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining Array"
      },
      "description": "Determines if object is an Array",
      "async": true,
      "ns": "object",
      "name": "isArray",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isArray(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "boolean"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining whether object is a boolean"
      },
      "description": "Determines if object is a Boolean",
      "async": true,
      "ns": "object",
      "name": "isBoolean",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isBoolean(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "date"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining whether object is a Date"
      },
      "description": "Determines if object is a Date",
      "async": true,
      "ns": "object",
      "name": "isDate",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isDate(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "DomElement"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining dom element"
      },
      "description": "Determines if object is a DOM element.",
      "async": true,
      "ns": "object",
      "name": "isElement",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isElement(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "boolean"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining empty object"
      },
      "description": "Determines if object contains no values (no enumerable own-properties)",
      "async": true,
      "ns": "object",
      "name": "isEmpty",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isEmpty(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "other": {
            "title": "Object",
            "type": "object"
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "object"
          },
          "no": {
            "title": "No",
            "type": "array"
          }
        }
      },
      "phrases": {
        "active": "Determining equality"
      },
      "description": "Performs an optimized deep comparison between the two objects, to determine if they should be considered equal.",
      "async": true,
      "ns": "object",
      "name": "isEqual",
      "fn": "on.input.in = function() {\n  if (underscore.isEqual($.in, $.other)) {\n    output({yes: $.get('in')});\n  } else {\n    output({no: $.get('in')});\n  }\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "type": "any",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "number"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining whether object is a finite number"
      },
      "description": "Determines if object is a Finite Number",
      "async": true,
      "ns": "object",
      "name": "isFinite",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isFinite(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "function"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining whether object is a function"
      },
      "description": "Determines if object is a Function",
      "async": true,
      "ns": "object",
      "name": "isFunction",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isFunction(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "NaN"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining whether object is NaN"
      },
      "description": "Determines if object is NaN",
      "async": true,
      "ns": "object",
      "name": "isNaN",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isNaN(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "null"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining whether object is Null"
      },
      "description": "Determines if object is Null",
      "async": true,
      "ns": "object",
      "name": "isNull",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isNull(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "type": "any",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "number"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining whether object is a number"
      },
      "description": "Determines if object is a Number",
      "async": true,
      "ns": "object",
      "name": "isNumber",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isNumber(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "type": "any",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "object"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining Object"
      },
      "description": "Determines if object is an Object",
      "async": true,
      "ns": "object",
      "name": "isObject",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isObject(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "type": "any",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "RegExp"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining whether object is a RegExp"
      },
      "description": "Determines if object is a RegExp",
      "async": true,
      "ns": "object",
      "name": "isRegExp",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isRegExp(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "string"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining whether object is a string"
      },
      "description": "Determines if object is a String",
      "async": true,
      "ns": "object",
      "name": "isString",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isString(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "boolean"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "phrases": {
        "active": "Determining whether object is undefined"
      },
      "description": "Determines if object is Undefined",
      "async": true,
      "ns": "object",
      "name": "isUndefined",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isUndefined(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          }
        }
      },
      "phrases": {
        "active": "Retrieving object properties"
      },
      "description": "Retrieve all the names of the object's properties",
      "async": true,
      "ns": "object",
      "name": "keys",
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n  output( { out: $.write('in', underscore.keys(val)) } );\n}\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          }
        }
      },
      "phrases": {
        "active": "Determining methods"
      },
      "description": "Gets a sorted list of the names of every method in an object â€” that is to say, the name of every function property of the object",
      "async": true,
      "ns": "object",
      "name": "methods",
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.methods($.in))});\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input Object",
            "type": "object",
            "async": true
          },
          "from": {
            "title": "From",
            "type": "array"
          },
          "to": {
            "title": "To",
            "type": "array"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "Output",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Moving object properties"
      },
      "description": "Moves properties within one object from one place to the other",
      "async": true,
      "ns": "object",
      "name": "move",
      "fn": "on.input.in = function() {\n  var doo;\n  var i;\n\n  // Receiving an array, check both are of the same length.\n  if($.from.length !== $.to.length) {\n    output({error: Error('from length does not match to length')});\n  } else {\n    doo = dot_object();\n    for(i = 0; i < $.from.length; i++) {\n      doo.move($.from[i], $.to[i], $.in);\n    }\n\n    output({out: $.write('in', $.in)});\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "omit": {
            "title": "Pick",
            "type": "any"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Omitting object keys"
      },
      "description": "Return a copy of the object, filtered to omit the blacklisted keys (or array of keys)",
      "async": true,
      "ns": "object",
      "name": "omit",
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.omit($.in, $.omit))});\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "type": "Object",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "array"
          }
        },
        "output": {
          "out": {
            "title": "Output",
            "type": "any"
          },
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Picking one of the properties"
      },
      "description": "Selects a (nested) property outputing the first property available. data.in || data.that || .. etc. Sends an error of none of the properties matched.",
      "async": true,
      "ns": "object",
      "name": "oneOf",
      "fn": "on.input.in = function() {\n\n  var val;\n  for(var i = 0; i < $.path.length; i++) {\n    val = dot_object().pick($.path[i], $.in);\n    if(val !== undefined) {\n      return output({ out: $.write('in', val) });\n    }\n  }\n\n  output({ error: new Error('None of the properties are found') });\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          }
        }
      },
      "phrases": {
        "active": "Transforming object to pairs"
      },
      "description": "Retrieve key value pairs from an object",
      "async": true,
      "ns": "object",
      "name": "pairs",
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.pairs($.in))});\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "pick": {
            "title": "Pick",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Picking object"
      },
      "description": "Output a copy of the object, filtered to only have values for the whitelisted keys (or array of valid keys)",
      "async": true,
      "ns": "object",
      "name": "pick",
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.pick($.in, $.pick))});\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "Input Object",
            "type": "object",
            "async": true
          },
          "route": {
            "title": "Routes",
            "type": "array"
          }
        },
        "output": {
          "out": {
            "title": "Route",
            "type": "array",
            "async": true
          },
          "missed": {
            "title": "Missed",
            "type": "object"
          },
          "error": {
            "title": "Error",
            "type": "Error"
          }
        }
      },
      "phrases": {
        "active": "Routing"
      },
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "async": true,
      "description": "Route packets based on a path, input index will result in same index on output. Route should be an array [path,match], multiple matchers can be added lik [[path,match],[path,match]] -> [0] route Router out [0] -> matched..",
      "ns": "object",
      "name": "router",
      "fn": "on.input.in = function() {\n\n  var out = [];\n  var reg;\n  var route;\n  for(var i = 0; i < $.route.length; i++) {\n    route = $.route[i];\n    if(route.length !== 2) {\n      output({\n        error: $.create(new Error('Route should be in the form [path,match]'))\n      });\n    }\n    var res = dot_object().pick(route[0], $.in);\n    // err.. does pick remove the value?\n    if(undefined !== res) {\n      reg = new RegExp(route[1]);\n      if(reg.test(res)) {\n        out[i] = $.get('in'); // send out the $.in, not the actual picked value.\n        output({out: out});\n        return true;\n      }\n    }\n  }\n\n  output({missed: $.get('in')});\n\n};\n"
    },
    {
      "ports": {
        "input": {
          "in": {
            "title": "Value",
            "type": "any",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "object": {
            "title": "Object",
            "type": "object",
            "default": null
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "phrases": {
        "active": "Setting property {{input.key}}"
      },
      "description": "Set a property on an object, or else create a new object and set the property",
      "async": true,
      "ns": "object",
      "name": "set",
      "fn": "on.input.in = function() {\n  var obj = $.object ? $.object : {};\n  dot_object().set($.path, $.in, obj);\n  output({out: $.write('in', obj)});\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input Object",
            "type": "object",
            "async": true
          },
          "from": {
            "title": "From",
            "type": "array"
          },
          "to": {
            "title": "To",
            "type": "array"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "Output",
            "type": "object"
          }
        }
      },
      "phrases": {
        "active": "Transfering object properties"
      },
      "description": "Transfer a properties from one object to another object.",
      "async": true,
      "ns": "object",
      "name": "transfer",
      "fn": "on.input.in = function() {\n  var doo;\n  var i;\n\n  // Receiving an array, check both are of the same length.\n  if($.from.length !== $.to.length) {\n    output({error: Error('from length does not match to length')});\n  } else {\n    doo = dot_object();\n    var out = {};\n    var merge = false;\n    for(i = 0; i < $.from.length; i++) {\n      doo.transfer($.from[i], $.to[i], $.in, out, merge);\n    }\n\n    output({out: $.write('in', out)});\n  }\n\n};\n"
    },
    {
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          }
        }
      },
      "phrases": {
        "active": "Retrieving object values"
      },
      "description": "Retrieve all of the values of the object's properties",
      "async": true,
      "ns": "object",
      "name": "values",
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.values($.in))});\n};\n"
    }
  ],
  "twigs": []
}