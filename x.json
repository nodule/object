{
  "name": "object",
  "description": "Object nodes for ChiÏ‡",
  "version": "0.0.2",
  "repository": {
    "type": "git",
    "url": "https://github.com/nodule/object.git"
  },
  "dependencies": {
    "chix-group": "^2.1.0",
    "dot-object": "^1.5.0",
    "instance-of": "1.x.x",
    "underscore": "1.x.x"
  },
  "nodes": [
    {
      "name": "clone",
      "ns": "object",
      "async": true,
      "description": "Create a shallow-copied clone of the object. Any nested objects or arrays will be copied by reference, not duplicated.",
      "phrases": {
        "active": "Cloning object"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({out: $.clone('in', underscore.clone($.in))});\n};\n\n"
    },
    {
      "name": "copy",
      "ns": "object",
      "async": true,
      "description": "Copy properties from one object to another object.",
      "phrases": {
        "active": "Copying object properties"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input Object",
            "type": "object",
            "async": true
          },
          "target": {
            "title": "Target Object",
            "type": "object",
            "default": {}
          },
          "from": {
            "title": "From",
            "type": "array"
          },
          "to": {
            "title": "To",
            "type": "array"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "Output",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var doo;\n  var i;\n\n  // Receiving an array, check both are of the same length.\n  if($.from.length !== $.to.length) {\n    output({error: $.create(Error('from length does not match to length'))});\n  } else {\n    doo = dot_object();\n    var merge = true;\n    // should already be done, but to make sure.\n    // not sure if it's the case when $.target is set as context\n    $.target = JSON.parse(JSON.stringify($.target));\n    for(i = 0; i < $.from.length; i++) {\n      doo.copy($.from[i], $.to[i], $.in, $.target, merge);\n    }\n\n    output({out: $.write('in', $.target)});\n  }\n};\n"
    },
    {
      "name": "create",
      "ns": "object",
      "async": true,
      "description": "Create an object, if input is a direct object it just returns a copy of the object",
      "phrases": {
        "active": "Creating object"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "fn": "on.input.in = function() {\n  output({out: $.clone('in', $.in)});\n};\n"
    },
    {
      "name": "defaults",
      "ns": "object",
      "async": true,
      "description": "Fill in undefined properties in object with values from the defaults objects, and return the object. As soon as the property is filled, further defaults will have no effect.",
      "phrases": {
        "active": "Applying defaults to object"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "defaults": {
            "title": "Defaults",
            "type": "object"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.defaults($.in, $.defaults))});\n};\n"
    },
    {
      "name": "extend",
      "ns": "object",
      "async": true,
      "description": "Copy all of the properties in the source objects over to the destination object, and return the destination object. It's in-order, so the last source will override properties of the same name in previous arguments.",
      "phrases": {
        "active": "Extending object"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "source": {
            "title": "Source Objects",
            "type": "array",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "fn": "state.extend = underscore.extend.apply;\nstate.args = null;\nstate.source = null;\n\non.input.in = function() {\n  if(state.args) {\n     state.args.unshift($.in);\n     output({out: $.write('in', state.extend(null, state.args))});\n     state.args = null;\n  } else {\n    state.args = [$.in];\n  }\n};\n\non.input.source = function() {\n\n  if(state.args) {\n     state.args.push($.source);\n     output({out: $.write('in', state.extend(null, state.args))});\n     state.args = null;\n  } else {\n    state.args = [$.source];\n  }\n\n};\n"
    },
    {
      "name": "fill",
      "ns": "object",
      "async": true,
      "description": "Fills an object with key/value pairs. Both key and in are array ports. Key must be fed the key names, and in will contain the values.",
      "phrases": {
        "active": "Filling object"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Value(s)",
            "type": "array",
            "async": true
          },
          "keys": {
            "title": "Key(s)",
            "type": "array"
          },
          "object": {
            "title": "Object",
            "type": "object",
            "default": null
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "fn": "on.input.in = function() {\n  var i;\n  var obj = $.object ? $.object : {};\n  if($.keys.length !== $.in.length) {\n    output({error: $.create(Error('Key length does not match value length'))});\n  } else {\n    for(i = 0; i < $.keys.length; i++) {\n     obj[$.keys[i]] = $.in[i];\n    }\n    output({out: $.write('in', obj)});\n  }\n};\n"
    },
    {
      "name": "group",
      "ns": "object",
      "async": true,
      "description": "Groups input into an array",
      "phrases": {
        "active": "Grouping object"
      },
      "ports": {
        "input": {
          "xin": {
            "title": "In Group",
            "type": "any"
          },
          "in": {
            "title": "Object",
            "type": "any"
          }
        },
        "output": {
          "xout": {
            "title": "Xout",
            "type": "array"
          },
          "out": {
            "title": "out",
            "group": "result",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "chix-group": "psichi/chix-group"
        }
      },
      "fn": "on.start = function start() {\n  state.group = chix_group.recv.create()\n  state.$ = null\n  state.group.on('group', function groupHandler(group) {\n    var p = state.$.create(group.map((p) => p.read(p.owner)))\n    p.removeMeta('chix-group')\n    output({out: p})\n  })\n}\n\non.input.in = function () {\n  state.group.add($.get('in'))\n  state.$ = $\n};\n\non.input.xin = function () {\n  state.group.receive($.get('xin'))\n  state.$ = $\n};\n"
    },
    {
      "name": "groupBy",
      "ns": "object",
      "async": true,
      "description": "Groups an object by it's differentiator",
      "phrases": {
        "active": "Grouping object"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "any"
          },
          "xin": {
            "title": "In Group",
            "type": "any"
          },
          "by": {
            "title": "Group By",
            "type": "any"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "group": "result",
            "type": "boolean"
          },
          "by": {
            "title": "Group By",
            "group": "result",
            "type": "any"
          },
          "xout": {
            "title": "Xout",
            "type": "array"
          }
        }
      },
      "dependencies": {
        "npm": {
          "chix-group": "psichi/chix-group"
        }
      },
      "fn": "on.start = function () {\n  state.groupBy = chix_group.groupBy.create()\n  state.groupBy.on('group', function (group, by) {\n    var $ = state.$\n    var g = chix_group.send.create()\n    output({xout: g.open()})\n    output({\n      out: g.write(\n        $.create(\n          group.map((p) => p.read(p.owner))\n        )\n      ),\n      by: $.create(by)\n    })\n    output({xout: g.close()})\n  })\n}\n\n\non.input.in = function () {\n  state.groupBy.add($.get('in'))\n}\n\non.input.by = function () {\n  state.groupBy.setBy($.get('by'))\n}\n\non.input.xin = function () {\n  state.$ = $\n  state.groupBy.receive($.get('xin'))\n}\n"
    },
    {
      "name": "has",
      "ns": "object",
      "async": true,
      "description": "Does the object contain the given property? You can use dot notation to dig deeper into the object.",
      "phrases": {
        "active": "Determining whether the object has property {{input.path}}"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string"
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "object"
          },
          "no": {
            "title": "No",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  if(dot_object().pick($.path, $.in)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n}\n"
    },
    {
      "name": "invert",
      "ns": "object",
      "async": true,
      "description": "Retrieves a copy of the object where the keys have become the values and the values the keys. For this to work, all of your object's values should be unique and string serializable",
      "phrases": {
        "active": "Inverting object"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.invert($.in))});\n};\n"
    },
    {
      "name": "is",
      "ns": "object",
      "async": true,
      "description": "Determines if object an object is of a certain type",
      "phrases": {
        "active": "Determining whether object is a {{input.type}}"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "kind": {
            "title": "Type",
            "type": "string"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "any"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "instance-of": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (instance_of(val, $.kind)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isArguments",
      "ns": "object",
      "async": true,
      "description": "Determines if object is an Arguments Object",
      "phrases": {
        "active": "Determining Arguments Object"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "type": "any"
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "object"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  if (underscore.isArguments($.in)) {\n    output({yes: $.get('in')});\n  } else {\n    output({no: $.get('in')});\n  }\n};\n"
    },
    {
      "name": "isArray",
      "ns": "object",
      "async": true,
      "description": "Determines if object is an Array",
      "phrases": {
        "active": "Determining Array"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "array"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isArray(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isBoolean",
      "ns": "object",
      "async": true,
      "description": "Determines if object is a Boolean",
      "phrases": {
        "active": "Determining whether object is a boolean"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "boolean"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isBoolean(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isDate",
      "ns": "object",
      "async": true,
      "description": "Determines if object is a Date",
      "phrases": {
        "active": "Determining whether object is a Date"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "date"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isDate(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isElement",
      "ns": "object",
      "async": true,
      "description": "Determines if object is a DOM element.",
      "phrases": {
        "active": "Determining dom element"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "DomElement"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isElement(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isEmpty",
      "ns": "object",
      "async": true,
      "description": "Determines if object contains no values (no enumerable own-properties)",
      "phrases": {
        "active": "Determining empty object"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "boolean"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isEmpty(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isEqual",
      "ns": "object",
      "async": true,
      "description": "Performs an optimized deep comparison between the two objects, to determine if they should be considered equal.",
      "phrases": {
        "active": "Determining equality"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "other": {
            "title": "Object",
            "type": "object"
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "object"
          },
          "no": {
            "title": "No",
            "type": "array"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  if (underscore.isEqual($.in, $.other)) {\n    output({yes: $.get('in')});\n  } else {\n    output({no: $.get('in')});\n  }\n};\n"
    },
    {
      "name": "isFinite",
      "ns": "object",
      "async": true,
      "description": "Determines if object is a Finite Number",
      "phrases": {
        "active": "Determining whether object is a finite number"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "type": "any",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "number"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isFinite(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isFunction",
      "ns": "object",
      "async": true,
      "description": "Determines if object is a Function",
      "phrases": {
        "active": "Determining whether object is a function"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "function"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isFunction(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isNaN",
      "ns": "object",
      "async": true,
      "description": "Determines if object is NaN",
      "phrases": {
        "active": "Determining whether object is NaN"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "NaN"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isNaN(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isNull",
      "ns": "object",
      "async": true,
      "description": "Determines if object is Null",
      "phrases": {
        "active": "Determining whether object is Null"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "null"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isNull(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isNumber",
      "ns": "object",
      "async": true,
      "description": "Determines if object is a Number",
      "phrases": {
        "active": "Determining whether object is a number"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "type": "any",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "number"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isNumber(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isObject",
      "ns": "object",
      "async": true,
      "description": "Determines if object is an Object",
      "phrases": {
        "active": "Determining Object"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "type": "any",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "object"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isObject(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isRegExp",
      "ns": "object",
      "async": true,
      "description": "Determines if object is a RegExp",
      "phrases": {
        "active": "Determining whether object is a RegExp"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "type": "any",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "RegExp"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isRegExp(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isString",
      "ns": "object",
      "async": true,
      "description": "Determines if object is a String",
      "phrases": {
        "active": "Determining whether object is a string"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "string"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isString(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "isUndefined",
      "ns": "object",
      "async": true,
      "description": "Determines if object is Undefined",
      "phrases": {
        "active": "Determining whether object is undefined"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "async": true,
            "type": "any"
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "yes": {
            "title": "Yes",
            "type": "boolean"
          },
          "no": {
            "title": "No",
            "type": "any"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n\n  if (underscore.isUndefined(val)) {\n    output({ yes: $.get('in') });\n  } else {\n    output({ no: $.get('in') });\n  }\n\n};\n"
    },
    {
      "name": "keys",
      "ns": "object",
      "async": true,
      "description": "Retrieve all the names of the object's properties",
      "phrases": {
        "active": "Retrieving object properties"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string",
            "default": null
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x",
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var val = $.path ? dot_object().pick($.path, $.in) : $.in;\n  output( { out: $.write('in', underscore.keys(val)) } );\n}\n"
    },
    {
      "name": "methods",
      "ns": "object",
      "async": true,
      "description": "Gets a sorted list of the names of every method in an object â€” that is to say, the name of every function property of the object",
      "phrases": {
        "active": "Determining methods"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.methods($.in))});\n};\n"
    },
    {
      "name": "move",
      "ns": "object",
      "async": true,
      "description": "Moves properties within one object from one place to the other",
      "phrases": {
        "active": "Moving object properties"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input Object",
            "type": "object",
            "async": true
          },
          "from": {
            "title": "From",
            "type": "array"
          },
          "to": {
            "title": "To",
            "type": "array"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "Output",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var doo;\n  var i;\n\n  // Receiving an array, check both are of the same length.\n  if($.from.length !== $.to.length) {\n    output({error: Error('from length does not match to length')});\n  } else {\n    doo = dot_object();\n    for(i = 0; i < $.from.length; i++) {\n      doo.move($.from[i], $.to[i], $.in);\n    }\n\n    output({out: $.write('in', $.in)});\n  }\n\n};\n"
    },
    {
      "name": "omit",
      "ns": "object",
      "async": true,
      "description": "Return a copy of the object, filtered to omit the blacklisted keys (or array of keys)",
      "phrases": {
        "active": "Omitting object keys"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "omit": {
            "title": "Pick",
            "type": "any"
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.omit($.in, $.omit))});\n};\n"
    },
    {
      "name": "oneOf",
      "ns": "object",
      "async": true,
      "description": "Selects a (nested) property outputing the first property available. data.in || data.that || .. etc. Sends an error of none of the properties matched.",
      "phrases": {
        "active": "Picking one of the properties"
      },
      "ports": {
        "input": {
          "in": {
            "title": "In",
            "type": "Object",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "array"
          }
        },
        "output": {
          "out": {
            "title": "Output",
            "type": "any"
          },
          "error": {
            "title": "Error",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n\n  var val;\n  for(var i = 0; i < $.path.length; i++) {\n    val = dot_object().pick($.path[i], $.in);\n    if(val !== undefined) {\n      return output({ out: $.write('in', val) });\n    }\n  }\n\n  output({ error: new Error('None of the properties are found') });\n\n};\n"
    },
    {
      "name": "pairs",
      "ns": "object",
      "async": true,
      "description": "Retrieve key value pairs from an object",
      "phrases": {
        "active": "Transforming object to pairs"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.pairs($.in))});\n};\n"
    },
    {
      "name": "pick",
      "ns": "object",
      "async": true,
      "description": "Output a copy of the object, filtered to only have values for the whitelisted keys (or array of valid keys)",
      "phrases": {
        "active": "Picking object"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          },
          "pick": {
            "title": "Pick",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.pick($.in, $.pick))});\n};\n"
    },
    {
      "name": "router",
      "ns": "object",
      "description": "Route packets based on a path, input index will result in same index on output. Route should be an array [path,match], multiple matchers can be added lik [[path,match],[path,match]] -> [0] route Router out [0] -> matched..",
      "async": true,
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "phrases": {
        "active": "Routing"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input Object",
            "type": "object",
            "async": true
          },
          "route": {
            "title": "Routes",
            "type": "array"
          }
        },
        "output": {
          "out": {
            "title": "Route",
            "type": "array",
            "async": true
          },
          "missed": {
            "title": "Missed",
            "type": "object"
          },
          "error": {
            "title": "Error",
            "type": "Error"
          }
        }
      },
      "fn": "on.input.in = function() {\n\n  var out = [];\n  var reg;\n  var route;\n  for(var i = 0; i < $.route.length; i++) {\n    route = $.route[i];\n    if(route.length !== 2) {\n      output({\n        error: $.create(new Error('Route should be in the form [path,match]'))\n      });\n    }\n    var res = dot_object().pick(route[0], $.in);\n    // err.. does pick remove the value?\n    if(undefined !== res) {\n      reg = new RegExp(route[1]);\n      if(reg.test(res)) {\n        out[i] = $.get('in'); // send out the $.in, not the actual picked value.\n        output({out: out});\n        return true;\n      }\n    }\n  }\n\n  output({missed: $.get('in')});\n\n};\n"
    },
    {
      "name": "set",
      "ns": "object",
      "async": true,
      "description": "Set a property on an object, or else create a new object and set the property",
      "phrases": {
        "active": "Setting property {{input.key}}"
      },
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "ports": {
        "input": {
          "in": {
            "title": "Value",
            "type": "any",
            "async": true
          },
          "path": {
            "title": "Path",
            "type": "string"
          },
          "object": {
            "title": "Object",
            "type": "object",
            "default": null
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "object"
          }
        }
      },
      "fn": "on.input.in = function() {\n  var obj = $.object ? $.object : {};\n  dot_object().set($.path, $.in, obj);\n  output({out: $.write('in', obj)});\n};\n"
    },
    {
      "name": "transfer",
      "ns": "object",
      "async": true,
      "description": "Transfer a properties from one object to another object.",
      "phrases": {
        "active": "Transfering object properties"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Input Object",
            "type": "object",
            "async": true
          },
          "from": {
            "title": "From",
            "type": "array"
          },
          "to": {
            "title": "To",
            "type": "array"
          }
        },
        "output": {
          "error": {
            "title": "Error",
            "type": "object"
          },
          "out": {
            "title": "Output",
            "type": "object"
          }
        }
      },
      "dependencies": {
        "npm": {
          "dot-object": "0.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  var doo;\n  var i;\n\n  // Receiving an array, check both are of the same length.\n  if($.from.length !== $.to.length) {\n    output({error: Error('from length does not match to length')});\n  } else {\n    doo = dot_object();\n    var out = {};\n    var merge = false;\n    for(i = 0; i < $.from.length; i++) {\n      doo.transfer($.from[i], $.to[i], $.in, out, merge);\n    }\n\n    output({out: $.write('in', out)});\n  }\n\n};\n"
    },
    {
      "name": "values",
      "ns": "object",
      "async": true,
      "description": "Retrieve all of the values of the object's properties",
      "phrases": {
        "active": "Retrieving object values"
      },
      "ports": {
        "input": {
          "in": {
            "title": "Object",
            "type": "object",
            "async": true
          }
        },
        "output": {
          "out": {
            "title": "out",
            "type": "array"
          }
        }
      },
      "dependencies": {
        "npm": {
          "underscore": "1.x.x"
        }
      },
      "fn": "on.input.in = function() {\n  output({out: $.write('in', underscore.values($.in))});\n};\n"
    }
  ]
}